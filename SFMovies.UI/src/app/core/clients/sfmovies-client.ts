//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param title (optional) 
     * @return OK
     */
    movies(title: string | undefined): Observable<MovieDto[]> {
        let url_ = this.baseUrl + "/Movies?";
        if (title === null)
            throw new globalThis.Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "title=" + encodeURIComponent("" + title) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMovies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMovies(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MovieDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MovieDto[]>;
        }));
    }

    protected processMovies(response: HttpResponseBase): Observable<MovieDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MovieDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param prefix (optional) 
     * @param limit (optional) 
     * @return OK
     */
    suggest(prefix: string | undefined, limit: number | undefined): Observable<TittleSuggestionDto[]> {
        let url_ = this.baseUrl + "/Movies/title/suggest?";
        if (prefix === null)
            throw new globalThis.Error("The parameter 'prefix' cannot be null.");
        else if (prefix !== undefined)
            url_ += "prefix=" + encodeURIComponent("" + prefix) + "&";
        if (limit === null)
            throw new globalThis.Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSuggest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSuggest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TittleSuggestionDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TittleSuggestionDto[]>;
        }));
    }

    protected processSuggest(response: HttpResponseBase): Observable<TittleSuggestionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TittleSuggestionDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class MovieDto implements IMovieDto {
    title?: string | undefined;
    releaseYear?: number | undefined;
    productionCompany?: string | undefined;
    director?: string | undefined;
    writer?: string | undefined;
    cast?: string[] | undefined;
    locations?: MovieLocationDto[] | undefined;

    constructor(data?: IMovieDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.releaseYear = _data["releaseYear"];
            this.productionCompany = _data["productionCompany"];
            this.director = _data["director"];
            this.writer = _data["writer"];
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(item);
            }
            if (Array.isArray(_data["locations"])) {
                this.locations = [] as any;
                for (let item of _data["locations"])
                    this.locations!.push(MovieLocationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovieDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["releaseYear"] = this.releaseYear;
        data["productionCompany"] = this.productionCompany;
        data["director"] = this.director;
        data["writer"] = this.writer;
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item);
        }
        if (Array.isArray(this.locations)) {
            data["locations"] = [];
            for (let item of this.locations)
                data["locations"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMovieDto {
    title?: string | undefined;
    releaseYear?: number | undefined;
    productionCompany?: string | undefined;
    director?: string | undefined;
    writer?: string | undefined;
    cast?: string[] | undefined;
    locations?: MovieLocationDto[] | undefined;
}

export class MovieLocationDto implements IMovieLocationDto {
    address?: string | undefined;
    funFact?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;

    constructor(data?: IMovieLocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.address = _data["address"];
            this.funFact = _data["funFact"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): MovieLocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieLocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address;
        data["funFact"] = this.funFact;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}

export interface IMovieLocationDto {
    address?: string | undefined;
    funFact?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
}

export class TittleSuggestionDto implements ITittleSuggestionDto {
    value?: string | undefined;

    constructor(data?: ITittleSuggestionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): TittleSuggestionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TittleSuggestionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface ITittleSuggestionDto {
    value?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}